Grading at Tue Dec  1 11:54:25 UTC 2020
Compiling cards.c -> cards.o
Compiling deck.c -> deck.o
Compiling input.c -> input.o
Compiling future.c -> future.o
Linking input.o, future.o deck.o, cards.o, and our tester
Testing with input file with 
 o 1 hand
 o No unknown/future cards
Valgrind reported errors:
==997== Memcheck, a memory error detector
==997== Copyright (C) 2002-2015, and GNU GPL'd, by Julian Seward et al.
==997== Using Valgrind-3.11.0 and LibVEX; rerun with -h for copyright info
==997== Command: ./tester hands.txt draw.txt
==997== Parent PID: 996
==997== 
==997== Invalid write of size 1
==997==    at 0x400B61: hand_from_string (in /graderhome/work/c4prj2_input/tester)
==997==    by 0x400CB8: read_input (in /graderhome/work/c4prj2_input/tester)
==997==    by 0x401989: main (test-input.c:69)
==997==  Address 0x0 is not stack'd, malloc'd or (recently) free'd
==997== 
==997== 
==997== Process terminating with default action of signal 11 (SIGSEGV): dumping core
==997==  Access not within mapped region at address 0x0
==997==    at 0x400B61: hand_from_string (in /graderhome/work/c4prj2_input/tester)
==997==    by 0x400CB8: read_input (in /graderhome/work/c4prj2_input/tester)
==997==    by 0x401989: main (test-input.c:69)
==997==  If you believe this happened as a result of a stack
==997==  overflow in your program's main thread (unlikely but
==997==  possible), you can try to increase the size of the
==997==  main thread stack using the --main-stacksize= flag.
==997==  The main thread stack size used in this run was 8388608.
==997== 
==997== HEAP SUMMARY:
==997==     in use at exit: 792 bytes in 11 blocks
==997==   total heap usage: 17 allocs, 6 frees, 5,008 bytes allocated
==997== 
==997== LEAK SUMMARY:
==997==    definitely lost: 0 bytes in 0 blocks
==997==    indirectly lost: 0 bytes in 0 blocks
==997==      possibly lost: 0 bytes in 0 blocks
==997==    still reachable: 792 bytes in 11 blocks
==997==         suppressed: 0 bytes in 0 blocks
==997== Rerun with --leak-check=full to see details of leaked memory
==997== 
==997== For counts of detected and suppressed errors, rerun with: -v
==997== ERROR SUMMARY: 1 errors from 1 contexts (suppressed: 0 from 0)
Testing with input file with 
 o Many hands
 o No unknown/future cards
Valgrind reported errors:
==1002== Memcheck, a memory error detector
==1002== Copyright (C) 2002-2015, and GNU GPL'd, by Julian Seward et al.
==1002== Using Valgrind-3.11.0 and LibVEX; rerun with -h for copyright info
==1002== Command: ./tester hands.txt draw.txt
==1002== Parent PID: 1001
==1002== 
==1002== Invalid write of size 1
==1002==    at 0x400B61: hand_from_string (in /graderhome/work/c4prj2_input/tester)
==1002==    by 0x400CB8: read_input (in /graderhome/work/c4prj2_input/tester)
==1002==    by 0x401989: main (test-input.c:69)
==1002==  Address 0x0 is not stack'd, malloc'd or (recently) free'd
==1002== 
==1002== 
==1002== Process terminating with default action of signal 11 (SIGSEGV): dumping core
==1002==  Access not within mapped region at address 0x0
==1002==    at 0x400B61: hand_from_string (in /graderhome/work/c4prj2_input/tester)
==1002==    by 0x400CB8: read_input (in /graderhome/work/c4prj2_input/tester)
==1002==    by 0x401989: main (test-input.c:69)
==1002==  If you believe this happened as a result of a stack
==1002==  overflow in your program's main thread (unlikely but
==1002==  possible), you can try to increase the size of the
==1002==  main thread stack using the --main-stacksize= flag.
==1002==  The main thread stack size used in this run was 8388608.
==1002== 
==1002== HEAP SUMMARY:
==1002==     in use at exit: 792 bytes in 11 blocks
==1002==   total heap usage: 17 allocs, 6 frees, 5,008 bytes allocated
==1002== 
==1002== LEAK SUMMARY:
==1002==    definitely lost: 0 bytes in 0 blocks
==1002==    indirectly lost: 0 bytes in 0 blocks
==1002==      possibly lost: 0 bytes in 0 blocks
==1002==    still reachable: 792 bytes in 11 blocks
==1002==         suppressed: 0 bytes in 0 blocks
==1002== Rerun with --leak-check=full to see details of leaked memory
==1002== 
==1002== For counts of detected and suppressed errors, rerun with: -v
==1002== ERROR SUMMARY: 1 errors from 1 contexts (suppressed: 0 from 0)
Testing with input file with 
 o Many hands
 o 1 unknown/future cards per hand
Valgrind reported errors:
==1008== Memcheck, a memory error detector
==1008== Copyright (C) 2002-2015, and GNU GPL'd, by Julian Seward et al.
==1008== Using Valgrind-3.11.0 and LibVEX; rerun with -h for copyright info
==1008== Command: ./tester h.txt d.txt
==1008== Parent PID: 1007
==1008== 
==1008== Invalid write of size 1
==1008==    at 0x400B61: hand_from_string (in /graderhome/work/c4prj2_input/tester)
==1008==    by 0x400CB8: read_input (in /graderhome/work/c4prj2_input/tester)
==1008==    by 0x401989: main (test-input.c:69)
==1008==  Address 0x0 is not stack'd, malloc'd or (recently) free'd
==1008== 
==1008== 
==1008== Process terminating with default action of signal 11 (SIGSEGV): dumping core
==1008==  Access not within mapped region at address 0x0
==1008==    at 0x400B61: hand_from_string (in /graderhome/work/c4prj2_input/tester)
==1008==    by 0x400CB8: read_input (in /graderhome/work/c4prj2_input/tester)
==1008==    by 0x401989: main (test-input.c:69)
==1008==  If you believe this happened as a result of a stack
==1008==  overflow in your program's main thread (unlikely but
==1008==  possible), you can try to increase the size of the
==1008==  main thread stack using the --main-stacksize= flag.
==1008==  The main thread stack size used in this run was 8388608.
==1008== 
==1008== HEAP SUMMARY:
==1008==     in use at exit: 792 bytes in 11 blocks
==1008==   total heap usage: 17 allocs, 6 frees, 5,008 bytes allocated
==1008== 
==1008== LEAK SUMMARY:
==1008==    definitely lost: 0 bytes in 0 blocks
==1008==    indirectly lost: 0 bytes in 0 blocks
==1008==      possibly lost: 0 bytes in 0 blocks
==1008==    still reachable: 792 bytes in 11 blocks
==1008==         suppressed: 0 bytes in 0 blocks
==1008== Rerun with --leak-check=full to see details of leaked memory
==1008== 
==1008== For counts of detected and suppressed errors, rerun with: -v
==1008== ERROR SUMMARY: 1 errors from 1 contexts (suppressed: 0 from 0)
Testing with input file with 
 o Many hands
 o Many unknown/future cards per hand
Valgrind reported errors:
==1014== Memcheck, a memory error detector
==1014== Copyright (C) 2002-2015, and GNU GPL'd, by Julian Seward et al.
==1014== Using Valgrind-3.11.0 and LibVEX; rerun with -h for copyright info
==1014== Command: ./tester i1 i2
==1014== Parent PID: 1013
==1014== 
==1014== Invalid read of size 8
==1014==    at 0x400D67: add_future_card (in /graderhome/work/c4prj2_input/tester)
==1014==    by 0x400BAA: hand_from_string (in /graderhome/work/c4prj2_input/tester)
==1014==    by 0x400CB8: read_input (in /graderhome/work/c4prj2_input/tester)
==1014==    by 0x401989: main (test-input.c:69)
==1014==  Address 0x8 is not stack'd, malloc'd or (recently) free'd
==1014== 
==1014== 
==1014== Process terminating with default action of signal 11 (SIGSEGV): dumping core
==1014==  Access not within mapped region at address 0x8
==1014==    at 0x400D67: add_future_card (in /graderhome/work/c4prj2_input/tester)
==1014==    by 0x400BAA: hand_from_string (in /graderhome/work/c4prj2_input/tester)
==1014==    by 0x400CB8: read_input (in /graderhome/work/c4prj2_input/tester)
==1014==    by 0x401989: main (test-input.c:69)
==1014==  If you believe this happened as a result of a stack
==1014==  overflow in your program's main thread (unlikely but
==1014==  possible), you can try to increase the size of the
==1014==  main thread stack using the --main-stacksize= flag.
==1014==  The main thread stack size used in this run was 8388608.
==1014== 
==1014== HEAP SUMMARY:
==1014==     in use at exit: 760 bytes in 9 blocks
==1014==   total heap usage: 13 allocs, 4 frees, 4,904 bytes allocated
==1014== 
==1014== LEAK SUMMARY:
==1014==    definitely lost: 0 bytes in 0 blocks
==1014==    indirectly lost: 0 bytes in 0 blocks
==1014==      possibly lost: 0 bytes in 0 blocks
==1014==    still reachable: 760 bytes in 9 blocks
==1014==         suppressed: 0 bytes in 0 blocks
==1014== Rerun with --leak-check=full to see details of leaked memory
==1014== 
==1014== For counts of detected and suppressed errors, rerun with: -v
==1014== ERROR SUMMARY: 1 errors from 1 contexts (suppressed: 0 from 0)

Overall Grade: F
