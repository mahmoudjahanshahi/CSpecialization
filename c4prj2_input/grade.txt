Grading at Tue Dec  1 16:15:05 UTC 2020
Compiling cards.c -> cards.o
Compiling deck.c -> deck.o
Compiling input.c -> input.o
Compiling future.c -> future.o
Linking input.o, future.o deck.o, cards.o, and our tester
Testing with input file with 
 o 1 hand
 o No unknown/future cards
Valgrind reported errors:
==149== Memcheck, a memory error detector
==149== Copyright (C) 2002-2015, and GNU GPL'd, by Julian Seward et al.
==149== Using Valgrind-3.11.0 and LibVEX; rerun with -h for copyright info
==149== Command: ./tester hands.txt draw.txt
==149== Parent PID: 148
==149== 
==149== Invalid read of size 1
==149==    at 0x400BFB: hand_from_string (in /graderhome/work/c4prj2_input/tester)
==149==    by 0x400CBE: read_input (in /graderhome/work/c4prj2_input/tester)
==149==    by 0x40198F: main (test-input.c:69)
==149==  Address 0x1 is not stack'd, malloc'd or (recently) free'd
==149== 
==149== 
==149== Process terminating with default action of signal 11 (SIGSEGV): dumping core
==149==  Access not within mapped region at address 0x1
==149==    at 0x400BFB: hand_from_string (in /graderhome/work/c4prj2_input/tester)
==149==    by 0x400CBE: read_input (in /graderhome/work/c4prj2_input/tester)
==149==    by 0x40198F: main (test-input.c:69)
==149==  If you believe this happened as a result of a stack
==149==  overflow in your program's main thread (unlikely but
==149==  possible), you can try to increase the size of the
==149==  main thread stack using the --main-stacksize= flag.
==149==  The main thread stack size used in this run was 8388608.
==149== 
==149== HEAP SUMMARY:
==149==     in use at exit: 808 bytes in 12 blocks
==149==   total heap usage: 19 allocs, 7 frees, 5,072 bytes allocated
==149== 
==149== LEAK SUMMARY:
==149==    definitely lost: 0 bytes in 0 blocks
==149==    indirectly lost: 0 bytes in 0 blocks
==149==      possibly lost: 0 bytes in 0 blocks
==149==    still reachable: 808 bytes in 12 blocks
==149==         suppressed: 0 bytes in 0 blocks
==149== Rerun with --leak-check=full to see details of leaked memory
==149== 
==149== For counts of detected and suppressed errors, rerun with: -v
==149== ERROR SUMMARY: 1 errors from 1 contexts (suppressed: 0 from 0)
Testing with input file with 
 o Many hands
 o No unknown/future cards
Valgrind reported errors:
==154== Memcheck, a memory error detector
==154== Copyright (C) 2002-2015, and GNU GPL'd, by Julian Seward et al.
==154== Using Valgrind-3.11.0 and LibVEX; rerun with -h for copyright info
==154== Command: ./tester hands.txt draw.txt
==154== Parent PID: 153
==154== 
==154== Invalid read of size 1
==154==    at 0x400BFB: hand_from_string (in /graderhome/work/c4prj2_input/tester)
==154==    by 0x400CBE: read_input (in /graderhome/work/c4prj2_input/tester)
==154==    by 0x40198F: main (test-input.c:69)
==154==  Address 0x1 is not stack'd, malloc'd or (recently) free'd
==154== 
==154== 
==154== Process terminating with default action of signal 11 (SIGSEGV): dumping core
==154==  Access not within mapped region at address 0x1
==154==    at 0x400BFB: hand_from_string (in /graderhome/work/c4prj2_input/tester)
==154==    by 0x400CBE: read_input (in /graderhome/work/c4prj2_input/tester)
==154==    by 0x40198F: main (test-input.c:69)
==154==  If you believe this happened as a result of a stack
==154==  overflow in your program's main thread (unlikely but
==154==  possible), you can try to increase the size of the
==154==  main thread stack using the --main-stacksize= flag.
==154==  The main thread stack size used in this run was 8388608.
==154== 
==154== HEAP SUMMARY:
==154==     in use at exit: 808 bytes in 12 blocks
==154==   total heap usage: 19 allocs, 7 frees, 5,072 bytes allocated
==154== 
==154== LEAK SUMMARY:
==154==    definitely lost: 0 bytes in 0 blocks
==154==    indirectly lost: 0 bytes in 0 blocks
==154==      possibly lost: 0 bytes in 0 blocks
==154==    still reachable: 808 bytes in 12 blocks
==154==         suppressed: 0 bytes in 0 blocks
==154== Rerun with --leak-check=full to see details of leaked memory
==154== 
==154== For counts of detected and suppressed errors, rerun with: -v
==154== ERROR SUMMARY: 1 errors from 1 contexts (suppressed: 0 from 0)
Testing with input file with 
 o Many hands
 o 1 unknown/future cards per hand
Valgrind reported errors:
==160== Memcheck, a memory error detector
==160== Copyright (C) 2002-2015, and GNU GPL'd, by Julian Seward et al.
==160== Using Valgrind-3.11.0 and LibVEX; rerun with -h for copyright info
==160== Command: ./tester h.txt d.txt
==160== Parent PID: 159
==160== 
==160== Invalid read of size 8
==160==    at 0x400D6D: add_future_card (in /graderhome/work/c4prj2_input/tester)
==160==    by 0x400BB0: hand_from_string (in /graderhome/work/c4prj2_input/tester)
==160==    by 0x400CBE: read_input (in /graderhome/work/c4prj2_input/tester)
==160==    by 0x40198F: main (test-input.c:69)
==160==  Address 0xfffffffffffffda8 is not stack'd, malloc'd or (recently) free'd
==160== 
==160== 
==160== Process terminating with default action of signal 11 (SIGSEGV): dumping core
==160==  Access not within mapped region at address 0xFFFFFFFFFFFFFDA8
==160==    at 0x400D6D: add_future_card (in /graderhome/work/c4prj2_input/tester)
==160==    by 0x400BB0: hand_from_string (in /graderhome/work/c4prj2_input/tester)
==160==    by 0x400CBE: read_input (in /graderhome/work/c4prj2_input/tester)
==160==    by 0x40198F: main (test-input.c:69)
==160==  If you believe this happened as a result of a stack
==160==  overflow in your program's main thread (unlikely but
==160==  possible), you can try to increase the size of the
==160==  main thread stack using the --main-stacksize= flag.
==160==  The main thread stack size used in this run was 8388608.
==160== 
==160== HEAP SUMMARY:
==160==     in use at exit: 808 bytes in 12 blocks
==160==   total heap usage: 19 allocs, 7 frees, 5,072 bytes allocated
==160== 
==160== LEAK SUMMARY:
==160==    definitely lost: 0 bytes in 0 blocks
==160==    indirectly lost: 0 bytes in 0 blocks
==160==      possibly lost: 0 bytes in 0 blocks
==160==    still reachable: 808 bytes in 12 blocks
==160==         suppressed: 0 bytes in 0 blocks
==160== Rerun with --leak-check=full to see details of leaked memory
==160== 
==160== For counts of detected and suppressed errors, rerun with: -v
==160== ERROR SUMMARY: 1 errors from 1 contexts (suppressed: 0 from 0)
Testing with input file with 
 o Many hands
 o Many unknown/future cards per hand
Valgrind reported errors:
==166== Memcheck, a memory error detector
==166== Copyright (C) 2002-2015, and GNU GPL'd, by Julian Seward et al.
==166== Using Valgrind-3.11.0 and LibVEX; rerun with -h for copyright info
==166== Command: ./tester i1 i2
==166== Parent PID: 165
==166== 
==166== Invalid read of size 8
==166==    at 0x400D6D: add_future_card (in /graderhome/work/c4prj2_input/tester)
==166==    by 0x400BB0: hand_from_string (in /graderhome/work/c4prj2_input/tester)
==166==    by 0x400CBE: read_input (in /graderhome/work/c4prj2_input/tester)
==166==    by 0x40198F: main (test-input.c:69)
==166==  Address 0x8 is not stack'd, malloc'd or (recently) free'd
==166== 
==166== 
==166== Process terminating with default action of signal 11 (SIGSEGV): dumping core
==166==  Access not within mapped region at address 0x8
==166==    at 0x400D6D: add_future_card (in /graderhome/work/c4prj2_input/tester)
==166==    by 0x400BB0: hand_from_string (in /graderhome/work/c4prj2_input/tester)
==166==    by 0x400CBE: read_input (in /graderhome/work/c4prj2_input/tester)
==166==    by 0x40198F: main (test-input.c:69)
==166==  If you believe this happened as a result of a stack
==166==  overflow in your program's main thread (unlikely but
==166==  possible), you can try to increase the size of the
==166==  main thread stack using the --main-stacksize= flag.
==166==  The main thread stack size used in this run was 8388608.
==166== 
==166== HEAP SUMMARY:
==166==     in use at exit: 760 bytes in 9 blocks
==166==   total heap usage: 13 allocs, 4 frees, 4,904 bytes allocated
==166== 
==166== LEAK SUMMARY:
==166==    definitely lost: 0 bytes in 0 blocks
==166==    indirectly lost: 0 bytes in 0 blocks
==166==      possibly lost: 0 bytes in 0 blocks
==166==    still reachable: 760 bytes in 9 blocks
==166==         suppressed: 0 bytes in 0 blocks
==166== Rerun with --leak-check=full to see details of leaked memory
==166== 
==166== For counts of detected and suppressed errors, rerun with: -v
==166== ERROR SUMMARY: 1 errors from 1 contexts (suppressed: 0 from 0)

Overall Grade: F
