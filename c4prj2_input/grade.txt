Grading at Tue Dec  1 17:32:46 UTC 2020
Compiling cards.c -> cards.o
Compiling deck.c -> deck.o
Compiling input.c -> input.o
Compiling future.c -> future.o
Linking input.o, future.o deck.o, cards.o, and our tester
Testing with input file with 
 o 1 hand
 o No unknown/future cards
Your file matched the expected output
Test case passed
Testing with input file with 
 o Many hands
 o No unknown/future cards
Your file matched the expected output
Test case passed
Testing with input file with 
 o Many hands
 o 1 unknown/future cards per hand
Valgrind reported errors:
==345== Memcheck, a memory error detector
==345== Copyright (C) 2002-2015, and GNU GPL'd, by Julian Seward et al.
==345== Using Valgrind-3.11.0 and LibVEX; rerun with -h for copyright info
==345== Command: ./tester h.txt d.txt
==345== Parent PID: 344
==345== 
==345== Invalid read of size 8
==345==    at 0x400D96: add_future_card (in /graderhome/work/c4prj2_input/tester)
==345==    by 0x400BDE: hand_from_string (in /graderhome/work/c4prj2_input/tester)
==345==    by 0x400CE7: read_input (in /graderhome/work/c4prj2_input/tester)
==345==    by 0x4019B8: main (test-input.c:69)
==345==  Address 0x8 is not stack'd, malloc'd or (recently) free'd
==345== 
==345== 
==345== Process terminating with default action of signal 11 (SIGSEGV): dumping core
==345==  Access not within mapped region at address 0x8
==345==    at 0x400D96: add_future_card (in /graderhome/work/c4prj2_input/tester)
==345==    by 0x400BDE: hand_from_string (in /graderhome/work/c4prj2_input/tester)
==345==    by 0x400CE7: read_input (in /graderhome/work/c4prj2_input/tester)
==345==    by 0x4019B8: main (test-input.c:69)
==345==  If you believe this happened as a result of a stack
==345==  overflow in your program's main thread (unlikely but
==345==  possible), you can try to increase the size of the
==345==  main thread stack using the --main-stacksize= flag.
==345==  The main thread stack size used in this run was 8388608.
==345== 
==345== HEAP SUMMARY:
==345==     in use at exit: 808 bytes in 12 blocks
==345==   total heap usage: 19 allocs, 7 frees, 5,072 bytes allocated
==345== 
==345== LEAK SUMMARY:
==345==    definitely lost: 0 bytes in 0 blocks
==345==    indirectly lost: 0 bytes in 0 blocks
==345==      possibly lost: 0 bytes in 0 blocks
==345==    still reachable: 808 bytes in 12 blocks
==345==         suppressed: 0 bytes in 0 blocks
==345== Rerun with --leak-check=full to see details of leaked memory
==345== 
==345== For counts of detected and suppressed errors, rerun with: -v
==345== ERROR SUMMARY: 1 errors from 1 contexts (suppressed: 0 from 0)
Testing with input file with 
 o Many hands
 o Many unknown/future cards per hand
Valgrind reported errors:
==351== Memcheck, a memory error detector
==351== Copyright (C) 2002-2015, and GNU GPL'd, by Julian Seward et al.
==351== Using Valgrind-3.11.0 and LibVEX; rerun with -h for copyright info
==351== Command: ./tester i1 i2
==351== Parent PID: 350
==351== 
==351== Invalid read of size 8
==351==    at 0x400D96: add_future_card (in /graderhome/work/c4prj2_input/tester)
==351==    by 0x400BDE: hand_from_string (in /graderhome/work/c4prj2_input/tester)
==351==    by 0x400CE7: read_input (in /graderhome/work/c4prj2_input/tester)
==351==    by 0x4019B8: main (test-input.c:69)
==351==  Address 0x8 is not stack'd, malloc'd or (recently) free'd
==351== 
==351== 
==351== Process terminating with default action of signal 11 (SIGSEGV): dumping core
==351==  Access not within mapped region at address 0x8
==351==    at 0x400D96: add_future_card (in /graderhome/work/c4prj2_input/tester)
==351==    by 0x400BDE: hand_from_string (in /graderhome/work/c4prj2_input/tester)
==351==    by 0x400CE7: read_input (in /graderhome/work/c4prj2_input/tester)
==351==    by 0x4019B8: main (test-input.c:69)
==351==  If you believe this happened as a result of a stack
==351==  overflow in your program's main thread (unlikely but
==351==  possible), you can try to increase the size of the
==351==  main thread stack using the --main-stacksize= flag.
==351==  The main thread stack size used in this run was 8388608.
==351== 
==351== HEAP SUMMARY:
==351==     in use at exit: 760 bytes in 9 blocks
==351==   total heap usage: 13 allocs, 4 frees, 4,904 bytes allocated
==351== 
==351== LEAK SUMMARY:
==351==    definitely lost: 0 bytes in 0 blocks
==351==    indirectly lost: 0 bytes in 0 blocks
==351==      possibly lost: 0 bytes in 0 blocks
==351==    still reachable: 760 bytes in 9 blocks
==351==         suppressed: 0 bytes in 0 blocks
==351== Rerun with --leak-check=full to see details of leaked memory
==351== 
==351== For counts of detected and suppressed errors, rerun with: -v
==351== ERROR SUMMARY: 1 errors from 1 contexts (suppressed: 0 from 0)

Overall Grade: C
